/* soapStub.h
   Generated by gSOAP 2.8.15 from soapWPCEventTrackingServiceSoapProxy.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under ONE of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#define SOAP_NAMESPACE_OF_ns1	"http://tempuri.org/"
#include "stdsoap2.h"
#if GSOAP_VERSION != 20815
# error "GSOAP VERSION MISMATCH IN GENERATED CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE__ns1__addEventLog
#define SOAP_TYPE__ns1__addEventLog (8)
/* ns1:addEventLog */
class SOAP_CMAC _ns1__addEventLog
{
public:
	std::string *userID;	/* optional element of type xsd:string */
	std::string *locationTagID;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 8; } /* = unique id SOAP_TYPE__ns1__addEventLog */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__addEventLog() { _ns1__addEventLog::soap_default(NULL); }
	virtual ~_ns1__addEventLog() { }
};
#endif

#ifndef SOAP_TYPE__ns1__addEventLogResponse
#define SOAP_TYPE__ns1__addEventLogResponse (9)
/* ns1:addEventLogResponse */
class SOAP_CMAC _ns1__addEventLogResponse
{
public:
	bool addEventLogResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 9; } /* = unique id SOAP_TYPE__ns1__addEventLogResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__addEventLogResponse() { _ns1__addEventLogResponse::soap_default(NULL); }
	virtual ~_ns1__addEventLogResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__addEventLogList
#define SOAP_TYPE__ns1__addEventLogList (10)
/* ns1:addEventLogList */
class SOAP_CMAC _ns1__addEventLogList
{
public:
	std::string *userID;	/* optional element of type xsd:string */
	std::string *locationTagID;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 10; } /* = unique id SOAP_TYPE__ns1__addEventLogList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__addEventLogList() { _ns1__addEventLogList::soap_default(NULL); }
	virtual ~_ns1__addEventLogList() { }
};
#endif

#ifndef SOAP_TYPE__ns1__addEventLogListResponse
#define SOAP_TYPE__ns1__addEventLogListResponse (11)
/* ns1:addEventLogListResponse */
class SOAP_CMAC _ns1__addEventLogListResponse
{
public:
	bool addEventLogListResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 11; } /* = unique id SOAP_TYPE__ns1__addEventLogListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__addEventLogListResponse() { _ns1__addEventLogListResponse::soap_default(NULL); }
	virtual ~_ns1__addEventLogListResponse() { }
};
#endif

#ifndef SOAP_TYPE___ns1__addEventLog
#define SOAP_TYPE___ns1__addEventLog (19)
/* Operation wrapper: */
struct __ns1__addEventLog
{
public:
	_ns1__addEventLog *ns1__addEventLog;	/* optional element of type ns1:addEventLog */
public:
	int soap_type() const { return 19; } /* = unique id SOAP_TYPE___ns1__addEventLog */
};
#endif

#ifndef SOAP_TYPE___ns1__addEventLogList
#define SOAP_TYPE___ns1__addEventLogList (23)
/* Operation wrapper: */
struct __ns1__addEventLogList
{
public:
	_ns1__addEventLogList *ns1__addEventLogList;	/* optional element of type ns1:addEventLogList */
public:
	int soap_type() const { return 23; } /* = unique id SOAP_TYPE___ns1__addEventLogList */
};
#endif

#ifndef SOAP_TYPE___ns1__addEventLog_
#define SOAP_TYPE___ns1__addEventLog_ (25)
/* Operation wrapper: */
struct __ns1__addEventLog_
{
public:
	_ns1__addEventLog *ns1__addEventLog;	/* optional element of type ns1:addEventLog */
public:
	int soap_type() const { return 25; } /* = unique id SOAP_TYPE___ns1__addEventLog_ */
};
#endif

#ifndef SOAP_TYPE___ns1__addEventLogList_
#define SOAP_TYPE___ns1__addEventLogList_ (27)
/* Operation wrapper: */
struct __ns1__addEventLogList_
{
public:
	_ns1__addEventLogList *ns1__addEventLogList;	/* optional element of type ns1:addEventLogList */
public:
	int soap_type() const { return 27; } /* = unique id SOAP_TYPE___ns1__addEventLogList_ */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (28)
/* SOAP Header: */
struct SOAP_ENV__Header
{
public:
	int soap_type() const { return 28; } /* = unique id SOAP_TYPE_SOAP_ENV__Header */
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (29)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
public:
	int soap_type() const { return 29; } /* = unique id SOAP_TYPE_SOAP_ENV__Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (31)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
public:
	int soap_type() const { return 31; } /* = unique id SOAP_TYPE_SOAP_ENV__Detail */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (34)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
public:
	int soap_type() const { return 34; } /* = unique id SOAP_TYPE_SOAP_ENV__Reason */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (35)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
public:
	int soap_type() const { return 35; } /* = unique id SOAP_TYPE_SOAP_ENV__Fault */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
